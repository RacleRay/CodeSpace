// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocal_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocal_2eproto;
class PBindName;
struct PBindNameDefaultTypeInternal;
extern PBindNameDefaultTypeInternal _PBindName_default_instance_;
class PChat;
struct PChatDefaultTypeInternal;
extern PChatDefaultTypeInternal _PChat_default_instance_;
class PRoomInformation;
struct PRoomInformationDefaultTypeInternal;
extern PRoomInformationDefaultTypeInternal _PRoomInformation_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PBindName* Arena::CreateMaybeMessage<::PBindName>(Arena*);
template<> ::PChat* Arena::CreateMaybeMessage<::PChat>(Arena*);
template<> ::PRoomInformation* Arena::CreateMaybeMessage<::PRoomInformation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PBindName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PBindName) */ {
 public:
  inline PBindName() : PBindName(nullptr) {}
  ~PBindName() override;
  explicit PROTOBUF_CONSTEXPR PBindName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBindName(const PBindName& from);
  PBindName(PBindName&& from) noexcept
    : PBindName() {
    *this = ::std::move(from);
  }

  inline PBindName& operator=(const PBindName& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBindName& operator=(PBindName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBindName& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBindName* internal_default_instance() {
    return reinterpret_cast<const PBindName*>(
               &_PBindName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBindName& a, PBindName& b) {
    a.Swap(&b);
  }
  inline void Swap(PBindName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBindName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBindName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBindName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBindName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PBindName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBindName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PBindName";
  }
  protected:
  explicit PBindName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:PBindName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocal_2eproto;
};
// -------------------------------------------------------------------

class PChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PChat) */ {
 public:
  inline PChat() : PChat(nullptr) {}
  ~PChat() override;
  explicit PROTOBUF_CONSTEXPR PChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PChat(const PChat& from);
  PChat(PChat&& from) noexcept
    : PChat() {
    *this = ::std::move(from);
  }

  inline PChat& operator=(const PChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PChat& operator=(PChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PChat* internal_default_instance() {
    return reinterpret_cast<const PChat*>(
               &_PChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PChat& a, PChat& b) {
    a.Swap(&b);
  }
  inline void Swap(PChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PChat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PChat";
  }
  protected:
  explicit PChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInformationFieldNumber = 1,
  };
  // string information = 1;
  void clear_information();
  const std::string& information() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_information(ArgT0&& arg0, ArgT... args);
  std::string* mutable_information();
  PROTOBUF_NODISCARD std::string* release_information();
  void set_allocated_information(std::string* information);
  private:
  const std::string& _internal_information() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_information(const std::string& value);
  std::string* _internal_mutable_information();
  public:

  // @@protoc_insertion_point(class_scope:PChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr information_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocal_2eproto;
};
// -------------------------------------------------------------------

class PRoomInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRoomInformation) */ {
 public:
  inline PRoomInformation() : PRoomInformation(nullptr) {}
  ~PRoomInformation() override;
  explicit PROTOBUF_CONSTEXPR PRoomInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PRoomInformation(const PRoomInformation& from);
  PRoomInformation(PRoomInformation&& from) noexcept
    : PRoomInformation() {
    *this = ::std::move(from);
  }

  inline PRoomInformation& operator=(const PRoomInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PRoomInformation& operator=(PRoomInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PRoomInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PRoomInformation* internal_default_instance() {
    return reinterpret_cast<const PRoomInformation*>(
               &_PRoomInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PRoomInformation& a, PRoomInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(PRoomInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PRoomInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PRoomInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PRoomInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PRoomInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PRoomInformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PRoomInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRoomInformation";
  }
  protected:
  explicit PRoomInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInformationFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string information = 2;
  void clear_information();
  const std::string& information() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_information(ArgT0&& arg0, ArgT... args);
  std::string* mutable_information();
  PROTOBUF_NODISCARD std::string* release_information();
  void set_allocated_information(std::string* information);
  private:
  const std::string& _internal_information() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_information(const std::string& value);
  std::string* _internal_mutable_information();
  public:

  // @@protoc_insertion_point(class_scope:PRoomInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr information_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBindName

// string name = 1;
inline void PBindName::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PBindName::name() const {
  // @@protoc_insertion_point(field_get:PBindName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBindName::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PBindName.name)
}
inline std::string* PBindName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PBindName.name)
  return _s;
}
inline const std::string& PBindName::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PBindName::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PBindName::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PBindName::release_name() {
  // @@protoc_insertion_point(field_release:PBindName.name)
  return _impl_.name_.Release();
}
inline void PBindName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PBindName.name)
}

// -------------------------------------------------------------------

// PChat

// string information = 1;
inline void PChat::clear_information() {
  _impl_.information_.ClearToEmpty();
}
inline const std::string& PChat::information() const {
  // @@protoc_insertion_point(field_get:PChat.information)
  return _internal_information();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PChat::set_information(ArgT0&& arg0, ArgT... args) {
 
 _impl_.information_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PChat.information)
}
inline std::string* PChat::mutable_information() {
  std::string* _s = _internal_mutable_information();
  // @@protoc_insertion_point(field_mutable:PChat.information)
  return _s;
}
inline const std::string& PChat::_internal_information() const {
  return _impl_.information_.Get();
}
inline void PChat::_internal_set_information(const std::string& value) {
  
  _impl_.information_.Set(value, GetArenaForAllocation());
}
inline std::string* PChat::_internal_mutable_information() {
  
  return _impl_.information_.Mutable(GetArenaForAllocation());
}
inline std::string* PChat::release_information() {
  // @@protoc_insertion_point(field_release:PChat.information)
  return _impl_.information_.Release();
}
inline void PChat::set_allocated_information(std::string* information) {
  if (information != nullptr) {
    
  } else {
    
  }
  _impl_.information_.SetAllocated(information, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.information_.IsDefault()) {
    _impl_.information_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PChat.information)
}

// -------------------------------------------------------------------

// PRoomInformation

// string name = 1;
inline void PRoomInformation::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PRoomInformation::name() const {
  // @@protoc_insertion_point(field_get:PRoomInformation.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PRoomInformation::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRoomInformation.name)
}
inline std::string* PRoomInformation::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PRoomInformation.name)
  return _s;
}
inline const std::string& PRoomInformation::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PRoomInformation::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PRoomInformation::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PRoomInformation::release_name() {
  // @@protoc_insertion_point(field_release:PRoomInformation.name)
  return _impl_.name_.Release();
}
inline void PRoomInformation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRoomInformation.name)
}

// string information = 2;
inline void PRoomInformation::clear_information() {
  _impl_.information_.ClearToEmpty();
}
inline const std::string& PRoomInformation::information() const {
  // @@protoc_insertion_point(field_get:PRoomInformation.information)
  return _internal_information();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PRoomInformation::set_information(ArgT0&& arg0, ArgT... args) {
 
 _impl_.information_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRoomInformation.information)
}
inline std::string* PRoomInformation::mutable_information() {
  std::string* _s = _internal_mutable_information();
  // @@protoc_insertion_point(field_mutable:PRoomInformation.information)
  return _s;
}
inline const std::string& PRoomInformation::_internal_information() const {
  return _impl_.information_.Get();
}
inline void PRoomInformation::_internal_set_information(const std::string& value) {
  
  _impl_.information_.Set(value, GetArenaForAllocation());
}
inline std::string* PRoomInformation::_internal_mutable_information() {
  
  return _impl_.information_.Mutable(GetArenaForAllocation());
}
inline std::string* PRoomInformation::release_information() {
  // @@protoc_insertion_point(field_release:PRoomInformation.information)
  return _impl_.information_.Release();
}
inline void PRoomInformation::set_allocated_information(std::string* information) {
  if (information != nullptr) {
    
  } else {
    
  }
  _impl_.information_.SetAllocated(information, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.information_.IsDefault()) {
    _impl_.information_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRoomInformation.information)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocal_2eproto
